.TH "LTTNG-GEN-TP" "1" "February 16, 2012" "" ""

.SH "NAME"
lttng-gen-tp \(em LTTng UST 2.x tracepoint code generator

.SH "SYNOPSIS"

.PP
.nf
lttng\-gen\-tp [OPTIONS] TEMPLATE_FILE
.fi
.SH "DESCRIPTION"

.PP
The LTTng project aims at providing highly efficient tracing tools for Linux.
Its tracers help in tracking down performance issues and debugging problems
involving multiple concurrent processes and threads. Tracing across multiple
systems is also possible.

The \fBlttng\-gen\-tp\fP tool simplifies the generation of the UST tracepoint
files. It takes a simple template file and generates the necessary code to use the defined tracepoints in your application.
The section TEMPLATE FILE FORMAT describes the content of the template file.

Currently, the tool can generate the .h, .c and .o associated with your
tracepoint. The generated .h can be directly included in your application.
You can let the tool generate the .o or compile the .c yourself.
You can compile the .c into a .o, .a or .so at your choice and
link it with your application.
Refer to the UST documentation for the
advantages and disadvantage of each form.
To compile the resulting .c file, you need to add the options
"\-llttng-ust \-I.".

.SH "OPTIONS"

.PP
This program follows the usual GNU command line syntax with long options starting with
two dashes. Below is a summary of the available options.
.PP

.TP
.BR "\-h, \-\-help"
Show summary of possible options and commands.
.TP
.BR "\-v, \-\-verbose"
Increase verbosity.
.TP
.BR "\-o, \-\-output"
Specify the generated file. The type of the generated file depend on the file
extension (.h, .c, .o).
This option can be specified multiple times to generate different file type.

.PP
When no output is specified the default files are generated with the same base filename as the template file. The default files are: .h, .c, .o.

.SH "TEMPLATE FILE FORMAT"

The template file, which has the usual extension \fB.tp\fP, contains a list of
TRACEPOINT_EVENT definitions and other optional definition entries like
TRACEPOINT_LOGLEVEL.
(See lttng-ust(3) for the complete list of available definition.)

You write them as you would write them in a C header file. You can add
comments with \fB/* */\fP, \fB//\fP and \fB#\fP.

The provider name (the first field of TRACEPOINT_EVENT) must be
the same for the whole file.

.TP
.SH "Example"
.TP
.nf
TRACEPOINT_EVENT(
    sample_tracepoint,
    message, // Comment
    TP_ARGS(char *, text),
    /* Next are the fields */
    TP_FIELDS(
        ctf_string(message, text)
    )
)
.SH "ENVIRONMENT VARIABLES"

.PP
When the tool generates a .o file, it will look for the following environment variables
.PP

.PP
.IP "CC"
Specify which C compiler to use. If the variable is not specified, the
tool will try "cc" and "gcc"

.IP "CFLAGS"
Flags directly passed to the compiler
.SH "SEE ALSO"

.PP
lttng-ust(3), lttng(1)
.PP
.SH "BUGS"

.PP
If you encounter any issues or usability problem, please report it on our
mailing list <lttng-dev@lists.lttng.org> to help improve this project.
.SH "CREDITS"

.PP
lttng\-gen\-tp is distributed under the GNU General Public License version 2. See the file
COPYING for details.
.PP
A Web site is available at http://lttng.org for more information on the LTTng
project.
.PP
You can also find our git tree at http://git.lttng.org.
.PP
Mailing lists for support and development: <lttng-dev@lists.lttng.org>.
.PP
You can find us on IRC server irc.oftc.net (OFTC) in #lttng.
.PP
.SH "AUTHORS"

.PP
lttng\-gen\-tp is written by Yannick Brosseau <yannick.brosseau@gmail.com>.
.PP
